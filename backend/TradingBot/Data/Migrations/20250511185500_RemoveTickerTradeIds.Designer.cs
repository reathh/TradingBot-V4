// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TradingBot.Data;

#nullable disable

namespace TradingBot.Data.Migrations
{
    [DbContext(typeof(TradingBotDbContext))]
    [Migration("20250511185500_RemoveTickerTradeIds")]
    partial class RemoveTickerTradeIds
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-preview.3.25171.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TradingBot.Data.Bot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<int>("EntryOrdersInAdvance")
                        .HasColumnType("integer");

                    b.Property<decimal>("EntryQuantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("EntryStep")
                        .HasColumnType("numeric");

                    b.Property<int>("ExitOrdersInAdvance")
                        .HasColumnType("integer");

                    b.Property<decimal>("ExitStep")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsLong")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MaxPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("PlaceOrdersInAdvance")
                        .HasColumnType("boolean");

                    b.Property<string>("PrivateKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<bool>("StartFromMaxPrice")
                        .HasColumnType("boolean");

                    b.Property<decimal>("StartingBaseAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Bots");
                });

            modelBuilder.Entity("TradingBot.Data.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal?>("AverageFillPrice")
                        .HasColumnType("numeric");

                    b.Property<bool>("Canceled")
                        .HasColumnType("boolean");

                    b.Property<bool>("Closed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EntryTradeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Fees")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsBuy")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("QuantityFilled")
                        .HasColumnType("numeric");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EntryTradeId")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TradingBot.Data.Ticker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Ask")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("Bid")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<DateTime>("CloseTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("HighPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("LastPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("LowPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("OpenPrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<DateTime>("OpenTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("PriceChange")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("PriceChangePercent")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("QuoteVolume")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("TotalTrades")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Volume")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.Property<decimal>("WeightedAveragePrice")
                        .HasPrecision(18, 8)
                        .HasColumnType("numeric(18,8)");

                    b.HasKey("Id");

                    b.HasIndex("Symbol", "Timestamp");

                    b.ToTable("Tickers");
                });

            modelBuilder.Entity("TradingBot.Data.Trade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BotId")
                        .HasColumnType("integer");

                    b.Property<string>("ExitOrderId")
                        .HasColumnType("text");

                    b.Property<decimal?>("Profit")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BotId");

                    b.HasIndex("ExitOrderId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("TradingBot.Data.Order", b =>
                {
                    b.HasOne("TradingBot.Data.Trade", "EntryTrade")
                        .WithOne("EntryOrder")
                        .HasForeignKey("TradingBot.Data.Order", "EntryTradeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("EntryTrade");
                });

            modelBuilder.Entity("TradingBot.Data.Trade", b =>
                {
                    b.HasOne("TradingBot.Data.Bot", "Bot")
                        .WithMany("Trades")
                        .HasForeignKey("BotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradingBot.Data.Order", "ExitOrder")
                        .WithMany("ExitTrades")
                        .HasForeignKey("ExitOrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Bot");

                    b.Navigation("ExitOrder");
                });

            modelBuilder.Entity("TradingBot.Data.Bot", b =>
                {
                    b.Navigation("Trades");
                });

            modelBuilder.Entity("TradingBot.Data.Order", b =>
                {
                    b.Navigation("ExitTrades");
                });

            modelBuilder.Entity("TradingBot.Data.Trade", b =>
                {
                    b.Navigation("EntryOrder")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
